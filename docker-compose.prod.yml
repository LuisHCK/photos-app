services:
    reverse-proxy:
        image: traefik:v3.1.4
        env_file:
            - .env
        command:
            - "--providers.docker=true"
            - "--providers.docker.exposedbydefault=false"
            - "--entrypoints.websecure.address=:443"
            - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
            - "--certificatesresolvers.myresolver.acme.email=${CONTACT_EMAIL}"
            - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
            - "--entrypoints.web.address=:80"
            - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
            - "--entrypoints.web.http.redirections.entryPoint.scheme=https"

        ports:
            - "443:443"
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock"
            - "./letsencrypt:/letsencrypt"
        logging:
            driver: json-file
            options:
                max-size: "1m"
                max-file: "3"
    photos:
        build:
            context: .
            dockerfile: Dockerfile.prod
        command: >
            sh -c "gunicorn photos.wsgi:application --bind 0.0.0.0:8180 --workers 3 --timeout 300"
        volumes:
            - .:/home/app/photos
            - uploads:/home/app/photos/uploads
            - static:/home/app/photos/collected_static
        env_file:
            - .env
        restart: always
        depends_on:
            - database
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.photos.rule=Host(`${DOMAIN}`)"
            - "traefik.http.routers.photos.entrypoints=websecure"
            - "traefik.http.routers.photos.tls.certresolver=myresolver"
            - "traefik.http.services.photos.loadbalancer.server.port=8180"
            - "traefik.http.middlewares.photos.redirectscheme.scheme=https"
            - "traefik.http.middlewares.photos.redirectscheme.permanent=true"
            - "traefik.http.middlewares.photos.compress=true"
            - "traefik.http.middlewares.photos.headers.customresponseheaders.Server="
        logging:
            driver: json-file
            options:
                max-size: "1m"
                max-file: "3"
        deploy:
            mode: replicated
            replicas: 2
    database:
        image: postgres:15-alpine
        env_file:
            - .env
        volumes:
            - postgresdb:/var/lib/postgresql/data
        logging:
            driver: json-file
            options:
                max-size: "1m"
                max-file: "3"
    redis:
        image: redis:alpine
        restart: always
        logging:
            driver: json-file
            options:
                max-size: "1m"
                max-file: "3"
    static:
        image: nginx:alpine
        volumes:
            - ./docker/nginx:/etc/nginx/templates
            - static:/home/app/photos/collected_static:ro
            - ./uploads:/home/app/photos/uploads:ro
        env_file:
            - .env
        depends_on:
            - reverse-proxy
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.static.entrypoints=websecure"
            - "traefik.http.routers.static.tls.certresolver=myresolver"
            # Match on the hostname and the path
            - "traefik.http.routers.static.rule=(Host(`${DOMAIN}`) && PathPrefix(`/static`) || PathPrefix(`/uploads`))"
            - "traefik.http.routers.static.tls=true"
            - "traefik.http.routers.static.tls.certresolver=le"
            - "traefik.http.services.static.loadbalancer.server.port=80"
            - "traefik.http.middlewares.static.headers.customrequestheaders.Cache-Control=max-age=2629800"
        logging:
            driver: json-file
            options:
                max-size: "1m"
                max-file: "3"

volumes:
    postgresdb:
    static:
    uploads:
